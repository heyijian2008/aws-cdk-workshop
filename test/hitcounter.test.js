"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertions_1 = require("@aws-cdk/assertions");
const cdk = require("@aws-cdk/core");
const lambda = require("@aws-cdk/aws-lambda");
const hitcounter_1 = require("../lib/hitcounter");
test('DynamoDB Table Created', () => {
    const stack = new cdk.Stack();
    // WHEN
    new hitcounter_1.HitCounter(stack, 'MyTestConstruct', {
        downstream: new lambda.Function(stack, 'TestFucntion', {
            runtime: lambda.Runtime.NODEJS_14_X,
            handler: 'hello.handler',
            code: lambda.Code.fromAsset('lambda')
        })
    });
    // THEN
    const template = assertions_1.Template.fromStack(stack);
    template.resourceCountIs("AWS::DynamoDB::Table", 1);
});
test('Lambda Has Environment Variables', () => {
    const stack = new cdk.Stack();
    // WHEN
    new hitcounter_1.HitCounter(stack, 'MyTestConstruct', {
        downstream: new lambda.Function(stack, 'TestFunction', {
            runtime: lambda.Runtime.NODEJS_14_X,
            handler: 'hello.handler',
            code: lambda.Code.fromAsset('lambda')
        })
    });
    // THEN
    const template = assertions_1.Template.fromStack(stack);
    const envCapture = new assertions_1.Capture();
    template.hasResourceProperties("AWS::Lambda::Function", {
        Environment: envCapture,
    });
    expect(envCapture.asObject()).toEqual({
        Variables: {
            DOWNSTREAM_FUNCTION_NAME: {
                Ref: "TestFunction22AD90FC",
            },
            HITS_TABLE_NAME: {
                Ref: "MyTestConstructHits24A357F0",
            },
        },
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGl0Y291bnRlci50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaGl0Y291bnRlci50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0RBQXdEO0FBQ3hELHFDQUFxQztBQUNyQyw4Q0FBOEM7QUFDOUMsa0RBQStDO0FBRS9DLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxHQUFHLEVBQUU7SUFDaEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDOUIsT0FBTztJQUNQLElBQUksdUJBQVUsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUU7UUFDckMsVUFBVSxFQUFFLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsY0FBYyxFQUFFO1lBQ25ELE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7WUFDbkMsT0FBTyxFQUFFLGVBQWU7WUFDeEIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztTQUN4QyxDQUFDO0tBQ0wsQ0FBQyxDQUFDO0lBQ0gsT0FBTztJQUNQLE1BQU0sUUFBUSxHQUFHLHFCQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNDLFFBQVEsQ0FBQyxlQUFlLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO0lBQzFDLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzlCLE9BQU87SUFDUCxJQUFJLHVCQUFVLENBQUMsS0FBSyxFQUFFLGlCQUFpQixFQUFFO1FBQ3JDLFVBQVUsRUFBRSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGNBQWMsRUFBRTtZQUNuRCxPQUFPLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXO1lBQ25DLE9BQU8sRUFBRSxlQUFlO1lBQ3hCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7U0FDeEMsQ0FBQztLQUNMLENBQUMsQ0FBQztJQUNILE9BQU87SUFDUCxNQUFNLFFBQVEsR0FBRyxxQkFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxNQUFNLFVBQVUsR0FBRyxJQUFJLG9CQUFPLEVBQUUsQ0FBQztJQUNqQyxRQUFRLENBQUMscUJBQXFCLENBQUMsdUJBQXVCLEVBQUU7UUFDcEQsV0FBVyxFQUFFLFVBQVU7S0FDMUIsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FDakM7UUFDSSxTQUFTLEVBQUU7WUFDUCx3QkFBd0IsRUFBRTtnQkFDdEIsR0FBRyxFQUFFLHNCQUFzQjthQUM5QjtZQUNELGVBQWUsRUFBRTtnQkFDYixHQUFHLEVBQUUsNkJBQTZCO2FBQ3JDO1NBQ0o7S0FDSixDQUNKLENBQUM7QUFFTixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlLCBDYXB0dXJlIH0gZnJvbSAnQGF3cy1jZGsvYXNzZXJ0aW9ucyc7XHJcbmltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcclxuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ0Bhd3MtY2RrL2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgeyBIaXRDb3VudGVyIH0gZnJvbSAnLi4vbGliL2hpdGNvdW50ZXInO1xyXG5cclxudGVzdCgnRHluYW1vREIgVGFibGUgQ3JlYXRlZCcsICgpID0+IHtcclxuICAgIGNvbnN0IHN0YWNrID0gbmV3IGNkay5TdGFjaygpO1xyXG4gICAgLy8gV0hFTlxyXG4gICAgbmV3IEhpdENvdW50ZXIoc3RhY2ssICdNeVRlc3RDb25zdHJ1Y3QnLCB7XHJcbiAgICAgICAgZG93bnN0cmVhbTogbmV3IGxhbWJkYS5GdW5jdGlvbihzdGFjaywgJ1Rlc3RGdWNudGlvbicsIHtcclxuICAgICAgICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzE0X1gsXHJcbiAgICAgICAgICAgIGhhbmRsZXI6ICdoZWxsby5oYW5kbGVyJyxcclxuICAgICAgICAgICAgY29kZTogbGFtYmRhLkNvZGUuZnJvbUFzc2V0KCdsYW1iZGEnKVxyXG4gICAgICAgIH0pXHJcbiAgICB9KTtcclxuICAgIC8vIFRIRU5cclxuICAgIGNvbnN0IHRlbXBsYXRlID0gVGVtcGxhdGUuZnJvbVN0YWNrKHN0YWNrKTtcclxuICAgIHRlbXBsYXRlLnJlc291cmNlQ291bnRJcyhcIkFXUzo6RHluYW1vREI6OlRhYmxlXCIsIDEpO1xyXG59KTtcclxuXHJcbnRlc3QoJ0xhbWJkYSBIYXMgRW52aXJvbm1lbnQgVmFyaWFibGVzJywgKCkgPT4ge1xyXG4gICAgY29uc3Qgc3RhY2sgPSBuZXcgY2RrLlN0YWNrKCk7XHJcbiAgICAvLyBXSEVOXHJcbiAgICBuZXcgSGl0Q291bnRlcihzdGFjaywgJ015VGVzdENvbnN0cnVjdCcsIHtcclxuICAgICAgICBkb3duc3RyZWFtOiBuZXcgbGFtYmRhLkZ1bmN0aW9uKHN0YWNrLCAnVGVzdEZ1bmN0aW9uJywge1xyXG4gICAgICAgICAgICBydW50aW1lOiBsYW1iZGEuUnVudGltZS5OT0RFSlNfMTRfWCxcclxuICAgICAgICAgICAgaGFuZGxlcjogJ2hlbGxvLmhhbmRsZXInLFxyXG4gICAgICAgICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQoJ2xhbWJkYScpXHJcbiAgICAgICAgfSlcclxuICAgIH0pO1xyXG4gICAgLy8gVEhFTlxyXG4gICAgY29uc3QgdGVtcGxhdGUgPSBUZW1wbGF0ZS5mcm9tU3RhY2soc3RhY2spO1xyXG4gICAgY29uc3QgZW52Q2FwdHVyZSA9IG5ldyBDYXB0dXJlKCk7XHJcbiAgICB0ZW1wbGF0ZS5oYXNSZXNvdXJjZVByb3BlcnRpZXMoXCJBV1M6OkxhbWJkYTo6RnVuY3Rpb25cIiwge1xyXG4gICAgICAgIEVudmlyb25tZW50OiBlbnZDYXB0dXJlLFxyXG4gICAgfSk7XHJcblxyXG4gICAgZXhwZWN0KGVudkNhcHR1cmUuYXNPYmplY3QoKSkudG9FcXVhbChcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIFZhcmlhYmxlczoge1xyXG4gICAgICAgICAgICAgICAgRE9XTlNUUkVBTV9GVU5DVElPTl9OQU1FOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVmOiBcIlRlc3RGdW5jdGlvbjIyQUQ5MEZDXCIsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgSElUU19UQUJMRV9OQU1FOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgUmVmOiBcIk15VGVzdENvbnN0cnVjdEhpdHMyNEEzNTdGMFwiLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9XHJcbiAgICApO1xyXG5cclxufSkiXX0=